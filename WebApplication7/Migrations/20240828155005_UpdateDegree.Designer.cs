// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication7.Models;

#nullable disable

namespace WebApplication7.Migrations
{
    [DbContext(typeof(WebAppDBContext))]
    [Migration("20240828155005_UpdateDegree")]
    partial class UpdateDegree
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication7.Models.Candidate", b =>
                {
                    b.Property<int>("CandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CandidateId"));

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CandidateId");

                    b.ToTable("Candidates");

                    b.HasData(
                        new
                        {
                            CandidateId = 1,
                            CV = "PDF",
                            CreationTime = new DateTime(2024, 8, 28, 18, 50, 4, 738, DateTimeKind.Local).AddTicks(7442),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Mobile = "123-456-7890"
                        },
                        new
                        {
                            CandidateId = 2,
                            CV = "Word",
                            CreationTime = new DateTime(2024, 8, 28, 18, 50, 4, 738, DateTimeKind.Local).AddTicks(7447),
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Mobile = "098-765-4321"
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.Degree", b =>
                {
                    b.Property<int>("DegreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DegreeId"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreationTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DegreeId");

                    b.HasIndex("CandidateId");

                    b.ToTable("Degrees");

                    b.HasData(
                        new
                        {
                            DegreeId = 1,
                            CandidateId = 1,
                            CreationTime = new DateTime(2024, 8, 28, 18, 50, 4, 738, DateTimeKind.Local).AddTicks(7586),
                            Name = "Bachelor of Science"
                        },
                        new
                        {
                            DegreeId = 2,
                            CandidateId = 1,
                            CreationTime = new DateTime(2024, 8, 28, 18, 50, 4, 738, DateTimeKind.Local).AddTicks(7591),
                            Name = "Master of Science"
                        },
                        new
                        {
                            DegreeId = 3,
                            CandidateId = 2,
                            CreationTime = new DateTime(2024, 8, 28, 18, 50, 4, 738, DateTimeKind.Local).AddTicks(7594),
                            Name = "Associate Degree in Arts"
                        });
                });

            modelBuilder.Entity("WebApplication7.Models.Degree", b =>
                {
                    b.HasOne("WebApplication7.Models.Candidate", "Candidate")
                        .WithMany("CandidateDegrees")
                        .HasForeignKey("CandidateId");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("WebApplication7.Models.Candidate", b =>
                {
                    b.Navigation("CandidateDegrees");
                });
#pragma warning restore 612, 618
        }
    }
}
